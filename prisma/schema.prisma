// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String?
  name      String?
  phone     String?
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  carts     Cart[]    @relation("UserCart")
  addresses Address[] @relation("UserAddress")
  orders    Order[]   @relation("UserOrder")
}

enum Role {
  admin
  store
  customer
  guest
}

model Permission {
  id        Int      @id @default(autoincrement())
  roleId    Int
  resource  String   @db.VarChar(50)
  action    String   @db.VarChar(50)
  createdAt DateTime @default(now())

  @@unique([roleId, resource, action], name: "unique_permission")
  @@map("permissions")
}

model Product {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String
  price       Float

  category   Category @relation("ProductCategory", fields: [categoryId], references: [id])
  categoryId Int

  stocks     Stock[]        @relation("ProductStock")
  images     ProductImage[] @relation("ProductImage")
  cartItems  CartItem[]     @relation("ProductToCartItems")
  orderItems OrderItem[]    @relation("ProductToOrderItems")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique

  products Product[] @relation("ProductCategory")
}

model Stock {
  id       Int @id @default(autoincrement())
  quantity Int

  product   Product @relation("ProductStock", fields: [productId], references: [id])
  productId Int

  lastStocked DateTime @default(now()) @updatedAt
}

model ProductImage {
  id        Int       @id @default(autoincrement())
  imageType ImageType @default(thumbnail)
  filePath  String    @unique

  product   Product @relation("ProductImage", fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  updatedAt DateTime @default(now())
}

model Cart {
  id         Int        @id @default(autoincrement())
  totalPrice Float
  status     CartStatus @default(ACTIVE)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  user   User   @relation("UserCart", fields: [userId], references: [id], onDelete: Cascade)
  userId String

  cartItems CartItem[] @relation("CartToItems")
}

model CartItem {
  id        Int     @id @default(autoincrement())
  quantity  Int
  price     Float
  product   Product @relation("ProductToCartItems", fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  cart   Cart @relation("CartToItems", fields: [cartId], references: [id])
  cartId Int
}

enum CartStatus {
  ACTIVE
  CHECKED_OUT
}

enum ImageType {
  cover
  thumbnail
}
model Order {
  id              Int         @id @default(autoincrement())
  orderNumber     String      @unique
  shippingAddress String
  subtotal        Decimal     @db.Decimal(10, 2)
  shippingFee     Decimal     @db.Decimal(10, 2)
  total           Decimal     @db.Decimal(10, 2)
  status          OrderStatus @default(CREATED)
  notes           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user                User                  @relation("UserOrder", fields: [userId], references: [id])
  userId              String
  orderItems          OrderItem[]           @relation("OrderToItems")
  orderPaymentHistory OrderPaymentHistory[] @relation("OrderToPaymentHistory")

  @@map("orders")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  unitPrice Decimal  @db.Decimal(10, 2)
  subtotal  Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order     Order   @relation("OrderToItems", fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  product   Product @relation("ProductToOrderItems", fields: [productId], references: [id])
  productId Int

  @@unique([orderId, productId])
  @@map("order_items")
}

enum OrderStatus {
  CREATED // สร้างออเดอร์
  PROCESSING // อยู่ระหว่างดำเนินการชำระเงิน
  COMPLETED // ชำระเงินเสร็จสิ้น
  CANCELLED // ยกเลิกรายการ
  REFUNDED // คืนเงินลูกค้า
}

enum OrderPaymentStatus {
  PAID // รับเงินลูกค้า
  CANCELLED // ยกเลิกรายการรับเงิน
  REFUNDED // คืนเงินลูกค้า
}

model OrderPaymentHistory {
  id             Int                @id @default(autoincrement())
  paid_amount    Decimal            @default(0) @db.Decimal(10, 2)
  payment_method PaymentMethod      @default(PROMPTPAY)
  slip_path      String? // suport cash on delivery or no slip case
  status         OrderPaymentStatus
  notes          String?
  created_at     DateTime           @default(now())

  order   Order @relation("OrderToPaymentHistory", fields: [orderId], references: [id], onDelete: Cascade)
  orderId Int

  @@map("order_payment_history")
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  PROMPTPAY
  CASH_ON_DELIVERY
}

model Address {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String
  address1  String
  address2  String
  city      String
  province  String
  zipcode   String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation("UserAddress", fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@map("addresses")
}
